#!/usr/bin/python

# See file COPYING distributed with sjs for copyright and license.

import sys
import os
import socket
import sjs
from optparse import OptionParser, OptionGroup, Values

def parse_args():
    """We are only interested in two options for compatibility with qstat for PBS"""
    parser = OptionParser(usage='Usage: %prog [options] JOB_ID')
    parser.add_option("-f", action="store_true", dest="full_output", default=False, help="Full display. Job, queue or server attributes displayed one to a line.")
    parser.add_option("-x", action="store_true", dest="past_jobs", default=False, help="Displays status information for finished and moved jobs in addition to running and queued jobs.")
    return parser.parse_args()


def main(args, job_ids):
    progname = os.path.basename(sys.argv[0])
    cluster = sjs.Cluster()
    jobs = cluster.get_all_jobs()
    if not jobs:
        sys.exit(0)
    if args.full_output:
        for job_id in job_ids:
            for job in jobs:
                if int(job.id) == int(job_id):
                    print 'Job Id:', job.id, \
                        '\n    Job_Name =', job.name, \
                        '\n    Job_Owner =', job.user, \
                        '\n    job_state =', job.job_state, \
                        '\n    Output_Path =', socket.gethostname() + ':' + job.stdout[:16] + '\n\t' + job.stdout[16:], \
                        '\n    Error_Path =', socket.gethostname() + ':' + job.stderr[:16] + '\n\t' + job.stderr[16:], \
                        '\n    Exit_status =', job.exit_status

    else:
        print 'job-ID  prior   name       user         state submit/start at     queue                          slots ja-task-ID'
        print '-----------------------------------------------------------------------------------------------------------------'
        fmt = '%7d 0.00000 %-10s %-12s %-5s %s %-30s     1           '
        for job in jobs:
            name = job.name[:10]
            user = job.user[:12]
            if job.job_state == 'R':
                #t = job.t_start.strftime('%m/%d/%Y %H:%M:%S')
                state = 'R'
                queue = 'all.q@localhost'
            elif job.job_state == 'F':
                #t = job.t_start.strftime('%m/%d/%Y %H:%M:%S')
                state = 'F'
                queue = ''
            else:
                if job.error_flag:
                    state = 'X'
                else:
                    state = 'Q'
                #t = job.t_submit.strftime('%m/%d/%Y %H:%M:%S')
                queue = ''
            print fmt % (job.id, name, user, state, "0/0/000 0:00:00", queue)
        sys.exit(0)

if __name__ == '__main__':
    (args, job_ids) = parse_args()
    main(args, job_ids)
# eof
